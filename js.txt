var turn;
var save;
var loc1;
var loc2;
var accuracy = 99;
var burning = false;
var sprayed = false;
var realmIn = false;
var k = document.getElementById("attacks");
var realmCorrelation = {
  "the Fire Key": "loc1",
  "the Water Key": "loc2",
  "the Ice Key": "loc3"
};
var locs = {
  loc1: [],
  loc2: [],
  loc3: []
};
var z = document.getElementById("locs");
$("#over").hide();
$("#health").hide();
var myAttacks = {};
var realmArray = ["", "fire", "water", "ice"];
var realm = "overworld";
var realms = {
  overworld: {
    maxUp: 2047,
    maxRight: 2047
  },
  fire: {
    maxUp: 63,
    maxRight: 63
  },
  water: {
    maxUp: 99,
    maxRight: 99
  },
  metal: {
    maxUp: 127,
    maxRight: 127
  }
};
var enemyAttacks = {};
var xp;
var criteria = ["", "", 32, 50, 100, 150, 200, 256, 300, 350, 450];
var myLevel;
var dragonName;
var attackBoosted;
var itemsIndex;
var itemsArray;
var invstring;
var enemies = {
  generic: {
    health: 64,
    attack: 16,
    defense: 1,
    winnings: 16,
    xp: 8,
    attacks: ["punch"],
    name: "Shadow's Apprentice"
  },
  fireGeneric: {
    health: 75,
    attack: 20,
    defense: 4,
    winnings: 20,
    xp: 10,
    attacks: ["punch", "fireball"],
    name: "Fire Mage"
  },
  waterGeneric: {
    health: 90,
    attack: 25,
    defense: 5,
    winnings: 32,
    xp: 16,
    attacks: ["punch", "spray"],
    name: "DHMO Sorcerer"
  },
  tin: {
    health: 100,
    attack: 32,
    defense: 8,
    winnings: 64,
    xp: 32,
    attacks: ["punch", "spear", "corrode"]
  },
  fire: {
    health: 128,
    attack: 64,
    defense: 0,
    xp: 128,
    attacks: ["punch", "fireball"]
  },
  water: {
    health: 150,
    attack: 75,
    defense: 4,
    xp: 256
  }
};
var turn;
var myTurnCounter;
var hisTurnCounter;
var effects = {};
var enemy;
var verbs;
var enemyHealth;
var count = 0;
var say = false;
var name = "";
var coordinates = [];
var health;
var maxHealth;
var gold;
var maxGold;
var inventory = [];
var villages = [[50, 50], [21, 14], [300, 320], [91, 80], [20, 2],[51, 50],[60, 40],
[506, 370],
[2000, 2000],
[500, 500],
[1024, 1024]];
var swordUpgrades;
var swordName = "traveler's sword";
var shieldName;
var swords = {
  "traveler's sword": {
    power: 16,
    level: 1,
    maxLevel: 16,
    element: null
  }
};
var shields = {
  "traveler's shield": {
    defense: 4,
    level: 1,
    maxLevel: 16
  }
};
function play(load) {
  $("#forms").attr("class", "general");
  if (load) {
    name = localStorage.name;
    coordinates = JSON.parse(localStorage.coordinates);
    health = localStorage.health;
    maxHealth = localStorage.maxHealth;
    gold = localStorage.gold;
    maxGold = localStorage.maxGold;
    inventory = JSON.parse(localStorage.inventory);
    xp = localStorage.xp;
    locs.loc1 = JSON.parse(localStorage.loc1);
    locs.loc2 = JSON.parse(localStorage.loc2);
    locs.loc3 = JSON.parse(localStorage.loc3);
    swordName = localStorage.swordName;
    shieldName = localStorage.shieldName;
    myLevel = localStorage.myLevel;
    if (inventory.includes("shield")) {
      $("#attacks").append("<option>Defend</option>");
    }
    if (inventory.includes("loc1")) {
      $("#locs").append("<option>the Fire Portal</option>");
    }
    if (inventory.includes("loc2")) {
      $("#locs").append("<option>the Water Portal</option>");
    }
  } else {
    name = prompt("What is your name?");
    inventory = ["sword"];
    coordinates = [0, 0];
    health = 256;
    maxHealth = 256;
    gold = 100;
    maxGold = 100;
    xp = 0;
    myLevel = 1;
    locs.loc1 = [
      Math.floor(Math.random() * 255),
      Math.floor(Math.random() * 255)
    ];
    locs.loc2 = [
      Math.floor(Math.random() * 324),
      Math.floor(Math.random() * 324)
    ];
    locs.loc3 = [
      Math.floor(Math.random() * 511),
      Math.floor(Math.random() * 511)
    ];
  }
}
$('#health').innerHTML = health;
function runCommand() {
  var dir;
  switch ($("#arr").find(":selected").text()) {
    case "\u2190":
      dir = "west";
      break;
    case "\u2191":
      dir = "north";
      break;
    case "\u2192":
      dir = "east";
      break;
    case "\u2193":
      dir = "south";
      break;
    case "\u2196":
      dir = "northwest";
      break;
    case "\u2197":
      dir = "northeast";
      break;
    case "\u2198":
      dir = "southeast";
      break;
    case "\u2199":
      dir = "southwest";
      break;
  }
  verbs[dir](parseInt($("#num").val()));
  $("#num").val("");
  $("html, body").animate({ scrollTop: $(document).height() }, 1000);
  if (coordinates[0] == locs.loc1[0] && coordinates[1] == locs.loc1[1]) {
    verbs.switchLoc("fire");
  }
  if (coordinates[0] == locs.loc2[0] && coordinates[1] == locs.loc2[1]) {
    verbs.switchLoc("water");
  }
  if (coordinates[0] == 0 && coordinates[1] == 0 && realm != "overworld") {
    document.getElementById("info").innerHTML +=
      "Do you want to leave the realm of " + realm + "?<br>";
    $("#forms").attr("class", "leave");
  }
  if (
    coordinates[0] == realms[realm].maxRight &&
    coordinates[1] == realms[realm].maxUp &&
    realm != "overworld"
  ) {
    combat(realm);
  }
  if (realm == "overworld") {
    for (var i = 0; i < villages.length; i++) {
      if (villages[i][0] == coordinates[0] && villages[i][1] == coordinates[1]) {
        landedOnVillage();
      }
    }
  }
  if (say) {
    document.getElementById("info").innerHTML +=
      "You encountered an enemy!<br>";

    switch (realm) {
      case "overworld":
        combat("generic");
        break;
      case "fire":
        combat("fireGeneric");
        break;
      case "water":
        combat("waterGeneric");
        break;
    }
  }
}
verbs = {};
verbs.east = function(num) {
  count = 0;
  say = false;
  var num2 = parseInt(num);
  for (var i = 0; i < num2; i++) {
    count++;
    if (Math.random() * 99 <= 2) {
      say = true;
      break;
    }
  }
  if (coordinates[0] + count <= realms[realm].maxRight) {
    coordinates[0] += count;
    document.getElementById("info").innerHTML +=
      "You moved " +
      count +
      ((count > 1 || count <= 0) && count != -1
        ? " spaces east"
        : " space east") +
      " to " +
      coordinates.toString() +
      ".<br>";
  } else {
    document.getElementById("info").innerHTML += "That's too far! <br>";
  }
};
verbs.west = function(num) {
  var num2 = parseInt(num);
  count = 0;
  say = false;
  var num2 = parseInt(num);
  for (var i = 0; i < num2; i++) {
    count++;
    if (Math.random() * 99 <= 1) {
      say = true;
      break;
    }
  }
  if (coordinates[0] - count >= 0) {
    coordinates[0] -= count;
    document.getElementById("info").innerHTML +=
      "You moved " +
      count +
      ((count > 1 || count <= 0) && count != -1
        ? " spaces west"
        : " space west") +
      " to " +
      coordinates.toString() +
      ". <br>";
  } else {
    document.getElementById("info").innerHTML += "That's too far! <br>";
  }
};
verbs.north = function(num) {
  var num2 = parseInt(num);
  count = 0;
  say = false;
  var num2 = parseInt(num);
  for (var i = 0; i < num2; i++) {
    count++;
    if (Math.random() * 99 <= 1) {
      say = true;
      break;
    }
  }
  if (coordinates[1] + count <= realms[realm].maxUp) {
    coordinates[1] += count;
    document.getElementById("info").innerHTML +=
      "You moved " +
      count +
      ((count > 1 || count <= 0) && count != -1
        ? " spaces north"
        : " space north") +
      " to " +
      coordinates.toString() +
      ".<br>";
  } else {
    document.getElementById("info").innerHTML += "That's too far! <br>";
  }
};
verbs.south = function(num) {
  var num2 = parseInt(num);
  count = 0;
  say = false;
  var num2 = parseInt(num);
  for (var i = 0; i < num2; i++) {
    count++;
    if (Math.random() * 99 <= 1) {
      say = true;
      break;
    }
  }
  if (coordinates[1] - count >= 0) {
    coordinates[1] -= count;
    document.getElementById("info").innerHTML +=
      "You moved " +
      count +
      ((count > 1 || count <= 0) && count != -1
        ? " spaces south"
        : " space south") +
      " to " +
      coordinates.toString() +
      ".<br>";
  } else {
    document.getElementById("info").innerHTML += "That's too far! <br>";
  }
};
verbs.southeast = function(num) {
  var num2 = parseInt(num);
  count = 0;
  say = false;
  var num2 = parseInt(num);
  for (var i = 0; i < num2; i++) {
    count++;
    if (Math.random() * 99 <= 1) {
      say = true;
      break;
    }
  }
  if (
    coordinates[1] - count >= 0 &&
    coordinates[0] + count <= realms[realm].maxRight
  ) {
    coordinates[1] -= count;
    coordinates[0] += count;
    document.getElementById("info").innerHTML +=
      "You moved " +
      count +
      ((count > 1 || count <= 0) && count != -1
        ? " spaces southeast"
        : " space southeast") +
      " to " +
      coordinates.toString() +
      ".<br>";
  } else {
    document.getElementById("info").innerHTML += "That's too far! <br>";
  }
};
verbs.southwest = function(num) {
  var num2 = parseInt(num);
  count = 0;
  say = false;
  var num2 = parseInt(num);
  for (var i = 0; i < num2; i++) {
    count++;
    if (Math.random() * 99 <= 1) {
      say = true;
      break;
    }
  }
  if (coordinates[1] - count >= 0 && coordinates[0] - count >= 0) {
    coordinates[1] -= count;
    coordinates[0] -= count;
    document.getElementById("info").innerHTML +=
      "You moved " +
      count +
      ((count > 1 || count <= 0) && count != -1
        ? " spaces southwest"
        : " space southwest") +
      " to " +
      coordinates.toString() +
      ".<br>";
  } else {
    document.getElementById("info").innerHTML += "That's too far! <br>";
  }
};
verbs.northwest = function(num) {
  var num2 = parseInt(num);
  count = 0;
  say = false;
  var num2 = parseInt(num);
  for (var i = 0; i < num2; i++) {
    count++;
    if (Math.random() * 99 <= 1) {
      say = true;
      break;
    }
  }
  if (
    coordinates[1] + num2 <= realms[realm].maxUp &&
    coordinates[0] - num2 >= 0
  ) {
    coordinates[1] += num2;
    coordinates[0] -= num2;
    document.getElementById("info").innerHTML +=
      "You moved " +
      num2 +
      ((num2 > 1 || num2 <= 0) && num2 != -1
        ? " spaces northwest"
        : " space northwest") +
      " to " +
      coordinates.toString() +
      ".<br>";
  } else {
    document.getElementById("info").innerHTML += "That's too far! <br>";
  }
};
verbs.northeast = function(num) {
  var num2 = parseInt(num);
  count = 0;
  say = false;
  var num2 = parseInt(num);
  for (var i = 0; i < num2; i++) {
    count++;
    if (Math.random() * 99 <= 1) {
      say = true;
      break;
    }
  }
  if (
    coordinates[1] + count <= realms[realm].maxUp &&
    coordinates[0] + count <= realms[realm].maxRight
  ) {
    coordinates[1] += count;
    coordinates[0] += count;
    document.getElementById("info").innerHTML +=
      "You moved " +
      count +
      ((count > 1 || count <= 0) && count != -1
        ? " spaces northeast"
        : " space northeast") +
      " to " +
      coordinates.toString() +
      ".<br>";
  } else {
    document.getElementById("info").innerHTML += "That's too far! <br>";
  }
};
verbs.save = function() {
  localStorage.name = name;
  localStorage.coordinates = JSON.stringify(coordinates);
  localStorage.health = health;
  localStorage.maxHealth = maxHealth;
  localStorage.gold = gold;
  localStorage.maxGold = maxGold;
  localStorage.inventory = JSON.stringify(inventory);
  localStorage.xp = xp;
  localStorage.myLevel = myLevel;
  localStorage.loc1 = JSON.stringify(locs.loc1);
  localStorage.loc2 = JSON.stringify(locs.loc2);
  localStorage.swordName = swordName;
  localStorage.shieldName = shieldName;
  localStorage.loc3 = JSON.stringify(locs.loc3);
  document.getElementById("info").innerHTML += "Game saved.<br>";
  $("html, body").animate({ scrollTop: $(document).height() }, 1000);
};
verbs.stats = function() {
  document.getElementById("info").innerHTML +=
    "Your coordinates are " +
    coordinates.toString() +
    ".<br>You have " +
    health +
    " health remaining.<br>You have " +
    gold +
    " gold.<br>";
  $("html, body").animate({ scrollTop: $(document).height() }, 1000);
};
verbs.buy = function(par) {
  if ($("#forms.equipment").length || $("#forms.magic").length) {
    switch (par) {
      case "traveler's shield":
        if (gold - 50 >= 0) {
          gold -= 50;
          shieldName = "traveler's shield";
          inventory.push("shield");
          document.getElementById("info").innerHTML +=
            "You bought a traveler's shield!<br>You have " +
            gold +
            " gold remaining.<br>";
          $("#attacks").append("<option>Defend</option>");
          $("#shield").hide();
          break;
        } else {
          document.getElementById("info").innerHTML += "That's too much!<br>";
          break;
        }
      case "loc1":
        if (gold - 100 >= 0) {
          gold -= 100;
          document.getElementById("info").innerHTML +=
            "You bought the location of the Fire Portal!<br>You have " +
            gold +
            " gold remaining.<br>";
          inventory.push("loc1");
          $("#loc1").hide();
          $("#locs").append("<option>the Fire Portal</option>");
          break;
        } else {
          document.getElementById("info").innerHTML += "That's too much!<br>";
          break;
        }
      case "potion":
        if (gold - 16 >= 0) {
          inventory.push("potion");
          gold -= 16;
          document.getElementById("info").innerHTML +=
            "You bought a healing potion!<br>You have " +
            gold +
            " gold remaining.<br>";
        } else {
          document.getElementById("info").innerHTML += "That's too much!<br>";
        }
        break;
      case "attack boost":
        if (gold - 32 >= 0) {
          inventory.push("attack boost");
          gold -= 32;
          document.getElementById("info").innerHTML +=
            "You bought an attack boost!<br>You have " +
            gold +
            " gold remaining.<br>";
        } else {
          document.getElementById("info").innerHTML += "That's too much!<br>";
        }
        break;
      case "loc2":
        if (gold - 150 >= 0) {
          inventory.push("loc2");
          gold -= 150;
          document.getElementById("info").innerHTML +=
            "You bought the location of the Water Portal!<br>You have " +
            gold +
            " gold remaining.<br>";
          $("#locs").append("<option>the Water Portal</option>");
        } else {
          document.getElementById("info").innerHTML += "That's too much!<br>";
        }
        break;
      case "loc3":
        if (gold - 200 >= 0) {
          inventory.push("loc3");
          gold -= 200;
          document.getElementById("info").innerHTML +=
            "You bought the location of the Metal Portal!<br>You have " +
            gold +
            " gold remaining.<br>";
          $("#locs").append("<option>the Metal Portal</option>");
        } else {
          document.getElementById("info").innerHTML += "That's too much!<br>";
        }
        $("html, body").animate({ scrollTop: $(document).height() }, 1000);
    }
  }
};
verbs.attack = function() {
  if (Math.floor(Math.random() * accuracy) < 100) {
    switch (k.options[k.selectedIndex].text) {
      case "Swing Sword":
        myAttacks.swing();
        break;
      case "Defend":
        myAttacks.defend();
    }
  } else {
    document.getElementById("info").innerHTML += "Your attack missed!<br>";
  }
  if (enemyHealth <= 0) {
    document.getElementById("info").innerHTML += "You won!<br>";
    if (realmIn) {
      maxGold += 50;
      gold = maxGold;
      verbs.leave();
    } else {
      var rndm = Math.round(Math.random() * 16 + 1 - 8);
      var winnings = 16 + rndm;
      if (gold + winnings <= maxGold) {
        gold += winnings;
      } else {
        gold = maxGold;
      }
      document.getElementById("info").innerHTML +=
        "You won " + winnings + " gold!<br>";
    }
    xp += enemies[enemy].xp;
    document.getElementById("info").innerHTML +=
      "You gained " + enemies[enemy].xp + "XP!<br>";
    verbs.levelCheck();
    $("html, body").animate({ scrollTop: $(document).height() }, 1000);
    $("#forms").attr("class", "general");
    effects = {};
    return false;
  }
  myTurnCounter++;
  turn = 0;
  verbs.effectCheck();
  var rndm = Math.floor(Math.random() * enemies[enemy].attacks.length);
  enemyAttacks[enemies[enemy].attacks[rndm]]();
  if (health < 0) {
    health = 0;
  }
  if (health <= maxHealth * 0.25) {
    document.body.style.color = "#f80";
    $("button").css("background-color", "#f80");
    $("input").css("color", "#f80");
    $("select").css("color", "#f80");
  }
  if (health <= maxHealth * 0.0625) {
    document.body.style.color = "#f00";
    $("button").css("background-color", "#f00");
    $("input").css("color", "#f00");
    $("select").css("color", "#f00");
  }
  if (health > maxHealth * 0.25) {
    document.body.style.color = "#0f0";
    $("button").css("background-color", "#0f0");
    $("input").css("color", "#0f0");
    $("select").css("color", "#0f0");
  }
  if (health <= 0) {
    $("#over").show();
    $("html, body").animate({ scrollTop: $(document).height() }, 1000);
    var over = setTimeout(del, 9001);
    $("#forms").attr("class", "nope");
    return false;
  }
  $("html, body").animate({ scrollTop: $(document).height() }, 1000);
  hisTurnCounter++;
  turn = 1;
  verbs.effectCheck();
};
verbs.location = function(name) {
  var locAvailable = false;
  $.each(inventory, function() {
    if (this == realmCorrelation[name]) {
      document.getElementById("info").innerHTML +=
        "That location is at " + locs[realmCorrelation[name]] + ".<br>";
    }
  });
};
verbs.map = function() {
  var s = "";
  var i = "";
  $.each(stores, function() {
    s += "(";
    s += this.toString();
    s += ");";
  });
  $.each(inns, function() {
    i += "(";
    i += this.toString();
    i += ");";
  });
  document.getElementById("info").innerHTML +=
    "Stores are at: " + s + "<br>Inns are at: " + i + "<br>";
  $("html, body").animate({ scrollTop: $(document).height() }, 1000);
};
verbs.navi = function() {
  $("#forms").attr("class", "navi");
  document.getElementById("info").innerHTML += "Are you sure about that?<br>";
};
verbs.die = function() {
  document.body.removeAttribute("style");
  document.body.innerHTML =
    "<h1>Error 9001</h1>I can't believe you've done this.";
};
verbs.use = function() {
  var k;
  var item = $("#items").find(":selected").text();
  if (item.indexOf("Potion") != -1) {
    if (health + 64 <= maxHealth) {
      health += 64;
    } else {
      health = maxHealth;
    }
    document.getElementById("info").innerHTML +=
      "You used a potion.<br>You regained 64 health.<br>";
    inventory.splice(inventory.indexOf("potion"), 1);
    var i = document.getElementById("items").selectedIndex;
    for (var j = 0; j < item.length; j++) {
      if (!isNaN(item[j]) && item[j] != " ") {
        k = j;
        break;
      }
    }
    item = item.slice(k);
    item = parseInt(item);
    console.log(item);
    item--;
    document.getElementById("items").remove(i);
    console.log(i);
    if (item != 0) {
      $("#items option")
        .eq(i)
        .before($("<option>Potion x" + item + "</option>"));
      document.getElementById("items").selectedIndex = i.toString();
      i++;
    }
    document.getElementById("items").remove(i);
  }
  if (item.indexOf("Attack Boost") != -1) {
    if (!attackBoosted) {
      swords[swordName].power *= 2;
      effects.attack = hisTurnCounter + 3;
      attackBoosted = true;
      for (var j = 0; j < item.length; j++) {
        if (!isNaN(item[j]) && item[j] != " ") {
          k = j;
          break;
        }
      }
      item = item.slice(k);
      item = parseInt(item);
      console.log(item);
      item--;
      document.getElementById("info").innerHTML +=
        "You used an attack boost! Your attack was doubled!<br>";
      inventory.splice(inventory.indexOf("attack boost"), 1);
      var i = document.getElementById("items").selectedIndex;
      if (item != 0) {
        $("#items option")
          .eq(i)
          .before($("<option>Attack Boost x" + item + "</option>"));
        document.getElementById("items").selectedIndex = i;
        i++;
      }
      document.getElementById("items").remove(i);
    } else {
      document.getElementById("info").innerHTML +=
        "You can only use one attack boost at a time.<br>";
    }
  }
  $("html, body").animate({ scrollTop: $(document).height() }, 1000);
};
verbs.switchLoc = function(choice) {
  var go = false;
  $.each(inventory, function() {
    if (
      "loc" + realmArray.indexOf(choice).toString() == this &&
      realm == "overworld"
    ) {
      go = true;
    }
  });
  if (go) {
    realm = choice;
    dragonName = choice;
    coordinates = [0, 0];
    document.getElementById("info").innerHTML +=
      "You were transported to the realm of " + choice + ".<br>";
  }
};
verbs.inventory = function() {
  document.getElementById("info").innerHTML += inventory.toString() + "<br>";
};
verbs.leave = function() {
  realm = "overworld";
  dragonName = "";
  coordinates = loc1;
  $("#forms").attr("class", "general");
  document.getElementById("info").innerHTML +=
    "You were transported back to the normal world.<br>";
  $("html, body").animate({ scrollTop: $(document).height() }, 1000);
};
verbs.run = function() {
  if (realm == "overworld") {
    if (Math.floor(Math.random() * 99) < 75) {
      document.getElementById("info").innerHTML += "Got away safely!<br>";
      $("#forms").attr("class", "general");
      return false;
    } else {
      document.getElementById("info").innerHTML += "You tripped!<br>";
      var rndm = Math.random() * enemies[enemy].attacks.length;
      rndm = Math.floor(rndm);
      enemyAttacks[enemies[enemy].attacks[rndm]]();
      if (health <= maxHealth * 0.25) {
        document.body.style.color = "#f80";
        $("button").css("background-color", "#f80");
        $("input").css("color", "#f80");
        $("select").css("color", "#f80");
      }
      if (health <= maxHealth * 0.0625) {
        document.body.style.color = "#f00";
        $("button").css("background-color", "#f00");
        $("input").css("color", "#f00");
        $("select").css("color", "#f00");
      }
      if (health > maxHealth * 0.25) {
        document.body.style.color = "#0f0";
        $("button").css("background-color", "#0f0");
        $("input").css("color", "#0f0");
        $("select").css("color", "#0f0");
      }
      if (health <= 0) {
        $("#over").show();
        $("html, body").animate({ scrollTop: $(document).height() }, 1000);
        var over = setTimeout(del, 9001);
        $("#forms").attr("class", "nope");
        return false;
      }
      $("html, body").animate({ scrollTop: $(document).height() }, 1000);
    }
  } else {
    if (Math.floor(Math.random() * 99) < 60) {
      document.getElementById("info").innerHTML += "Got away safely!<br>";
      $("#forms").attr("class", "general");
      return false;
    } else {
      document.getElementById("info").innerHTML += "You tripped!<br>";
      var rndm = Math.floor(Math.random() * enemies[enemy].attacks.length);
      enemyAttacks[enemies[enemy].attacks[rndm]]();
      if (health <= maxHealth * 0.25) {
        document.body.style.color = "#f80";
        $("button").css("background-color", "#f80");
        $("input").css("color", "#f80");
        $("select").css("color", "#f80");
      }
      if (health <= maxHealth * 0.0625) {
        document.body.style.color = "#f00";
        $("button").css("background-color", "#f00");
        $("input").css("color", "#f00");
        $("select").css("color", "#f00");
      }
      if (health > maxHealth * 0.25) {
        document.body.style.color = "#0f0";
        $("button").css("background-color", "#0f0");
        $("input").css("color", "#0f0");
        $("select").css("color", "#0f0");
      }
      if (health <= 0) {
        $("#over").show();
        $("html, body").animate({ scrollTop: $(document).height() }, 1000);
        var over = setTimeout(del, 9001);
        $("#forms").attr("class", "nope");
        return false;
      }
      $("html, body").animate({ scrollTop: $(document).height() }, 1000);
    }
  }
};
verbs.effectCheck = function() {
  if (hisTurnCounter == effects.attack) {
    swords[swordName].power /= 2;
    attackBoosted = false;
    document.getElementById("info").innerHTML +=
      "Your attack boost wore off.<br>";
    delete effects.attack;
  }
  if (effects.fire && turn) {
    health -= 8;
    document.getElementById("info").innerHTML +=
      "You succumbed to your fire and lost 8 health.<br> You have " +
      health +
      " health remaining.<br>";
  }
  if (hisTurnCounter + 1 == effects.fire) {
    burning = false;
    document.getElementById("info").innerHTML +=
      "The fire was extinguished.<br>";
    delete effects.fire;
  }
  if (hisTurnCounter + 1 == effects.water) {
    sprayed = false;
    accuracy = 100;
    document.getElementById("info").innerHTML += "The water cleared up.<br>";
    delete effects.water;
  }
  if (hisTurnCounter == effects.shield) {
    document.getElementById("info").innerHTML +=
      "You withdrew your shield.<br>";
    delete effects.shield;
  }
  if (myTurnCounter == effects.spear && !turn) {
    if (!effects.shield) {
      var damage;
      var hasAShield = false;
      $.each(inventory, function() {
        if (this == "shield") {
          hasAShield = true;
        }
      });
      var rndm = Math.round(Math.random() * 8 + 1) - 4;
      if (hasAShield) {
        health -=
          (enemies[enemy].attack - shields[shieldName].defense + rndm) * 2;
        damage =
          (enemies[enemy].attack - shields[shieldName].defense + rndm) * 2;
      } else {
        health -= (enemies[enemy].attack + rndm) * 2;
        damage = (enemies[enemy].attack + rndm) * 2;
      }
      if (health < 0) {
        health = 0;
      }
      document.getElementById("info").innerHTML +=
        "The " +
        enemies[enemy].name +
        " thrust its spear into you.<br>You took " +
        damage +
        " damage.<br> You have " +
        health +
        " health remaining.<br>";
    } else {
      document.getElementById("info").innerHTML +=
        "The attack was blocked by your shield.<br>";
    }
  }
};
function combat(en) {
  turn = 1;
  effects = {};
  attackBoosted = false;
  say = false;
  myTurnCounter = 0;
  hisTurnCounter = 0;
  itemsIndex = 0;
  enemy = en;
  if (enemy == realm) {
    realmIn = true;
  }
  $("#forms").attr("class", "combat");
  switch (enemy) {
    case "generic":
      document.getElementById("info").innerHTML +=
        "It is a Shadow's Apprentice.<br>";
      break;
    case "fireGeneric":
      document.getElementById("info").innerHTML += "It is a Fire Mage.<br>";
      break;
    case "waterGeneric":
      document.getElementById("info").innerHTML += "It is a DHMO Sorcerer!<br>";
      break;
    case "fire":
      document.getElementById("info").innerHTML +=
        "It is the Dragon of Fire!<br>";
      break;
    case "water":
      document.getElementById("info").innerHTML +=
        "It is the Dragon of Water!<br>";
      break;
  }
  enemyHealth = enemies[enemy].health;
  $("#items").html("");
  var itemCount = 0;
  $.each(inventory, function() {
    if (this == "potion") {
      itemCount++;
    }
  });
  if (itemCount > 0) {
    $("#items").append(
      "<option class='potion'>Potion x" + itemCount + "</option>"
    );
  }
  itemCount = 0;
  $.each(inventory, function() {
    if (this == "attack boost") {
      itemCount++;
    }
  });
  if (itemCount > 0) {
    $("#items").append(
      "<option class='attack boost'>Attack Boost x" + itemCount + "</option>"
    );
  }
}
function landedOnStore() {
  $("#forms").attr("class", "equipment");
  document.getElementById("info").innerHTML += "You entered the equipment shop.<br>";
  var shieldAvailable = true;
  $.each(inventory, function() {
    if (this == "shield") {
      shieldAvailable = false;
    }
  });
  $("#shield").toggle(shieldAvailable);
  var locOneAvailable = true;
  $.each(inventory, function() {
    if (this == "loc1") {
      locOneAvailable = false;
    }
  });
  $("#loc1").toggle(locOneAvailable);
}
function landedOnInn() {
  document.getElementById("info").innerHTML +=
    "You paid 5 gold to stay at an inn. Your health has been restored.<br>";
  health = maxHealth;
  gold -= 5;
  document.body.style.color = "#0f0";
  $("button").css("background-color", "#0f0");
  $("input").css("color", "#0f0");
  $("select").css("color", "#0f0");
}
function del() {
  document.body.removeAttribute("style");
  document.body.innerHTML =
    "<h1>Error 404</h1>You died and took the page down with you!";
}
verbs.levelCheck = function() {
  var leveledUp;
  do {
    leveledUp = false;
    if (xp >= criteria[myLevel + 1]) {
      myLevel++;
      document.getElementById("info").innerHTML +=
        "You grew to level " + myLevel + "!<br>";
      leveledUp = true;
    }
  } while (leveledUp);
  return false;
};
enemyAttacks.punch = function() {
  if (!effects.shield) {
    var damage;
    var hasAShield = false;
    $.each(inventory, function() {
      if (this == "shield") {
        hasAShield = true;
      }
    });
    var rndm = Math.round(Math.random() * 8 + 1) - 4;
    if (hasAShield) {
      health -= enemies[enemy].attack - shields[shieldName].defense + rndm;
      damage = enemies[enemy].attack - shields[shieldName].defense + rndm;
    } else {
      health -= enemies[enemy].attack + rndm;
      damage = enemies[enemy].attack + rndm;
    }
    if (health < 0) {
      health = 0;
    }
    document.getElementById("info").innerHTML +=
      "The " +
      enemies[enemy].name +
      " used Punch.<br>You took " +
      damage +
      " damage.<br>You have " +
      health +
      " health remaining.<br>";
  }
};
enemyAttacks.fireball = function() {
  if (!effects.shield) {
    var damage;
    var hasAShield = false;
    $.each(inventory, function() {
      if (this == "shield") {
        hasAShield = true;
      }
    });
    var rndm = Math.round(Math.random() * 8 + 1) - 4;
    if (hasAShield) {
      health -= enemies[enemy].attack - shields[shieldName].defense + rndm + 2;
      damage = enemies[enemy].attack - shields[shieldName].defense + rndm + 2;
    } else {
      health -= enemies[enemy].attack + rndm + 2;
      damage = enemies[enemy].attack + rndm + 2;
    }
    if (health < 0) {
      health = 0;
    }
    document.getElementById("info").innerHTML +=
      "The " +
      enemies[enemy].name +
      " used Fireball.<br>You took " +
      damage +
      " damage.<br>You have " +
      health +
      " health remaining.<br>";
    if (Math.floor(Math.random() * 99) < 90 && !burning) {
      document.getElementById("info").innerHTML += "You're burning!<br>";
      burning = true;
      effects.fire = myTurnCounter + 3;
    }
  }
};
enemyAttacks.spray = function() {
  if (!effects.shield) {
    var damage;
    var hasAShield = false;
    $.each(inventory, function() {
      if (this == "shield") {
        hasAShield = true;
      }
    });
    var rndm = Math.round(Math.random() * 8 + 1) - 4;
    if (hasAShield) {
      health -= enemies[enemy].attack - shields[shieldName].defense + rndm + 2;
      damage = enemies[enemy].attack - shields[shieldName].defense + rndm + 2;
    } else {
      health -= enemies[enemy].attack + rndm + 2;
      damage = enemies[enemy].attack + rndm + 2;
    }
    if (health < 0) {
      health = 0;
    }
    document.getElementById("info").innerHTML +=
      "The " +
      enemies[enemy].name +
      " used Spray.<br>You took " +
      damage +
      " damage.<br>You have " +
      health +
      " health remaining.<br>";
    if (Math.floor(Math.random() * 99) < 95 && !sprayed) {
      document.getElementById("info").innerHTML +=
        "You got water in your eyes!<br>Your accuracy went down.<br>";
      sprayed = true;
      effects.water = myTurnCounter + 5;
      accuracy = 84;
    }
  }
};
enemyAttacks.spear = function() {
  document.getElementById("info").innerHTML +=
    "The " + enemies[enemy].name + " readied its spear.";
  effects.spear = hisTurnCounter + 1;
};
enemyAttacks.corrode = function(){
  document.getElementById("info").innerHTML +=
    "The " + enemies[enemy].name + " used Corrode.";
  effects.corrode = true;
}
myAttacks.swing = function() {
  document.getElementById("info").innerHTML += "You swung your sword.<br>";
  var enemyDefense = enemies[enemy].defense;
  var rndm = Math.round(Math.random() * 8 + 1) - 4;
  var damage =
    swords[swordName].power - enemyDefense + rndm + 8 * (myLevel - 1);
  if (damage < 0) {
    damage = 0;
  }
  enemyHealth = enemyHealth - damage;
  if (Math.random() * 99 < 4.6875 * swords[swordName].level) {
    document.getElementById("info").innerHTML += "Critical hit!<br>";
    damage *= 2;
  }
  document.getElementById("info").innerHTML +=
    "The " + enemies[enemy].name + " took " + damage + " damage.<br>";
};
myAttacks.defend = function() {
  document.getElementById("info").innerHTML +=
    "You held out your shield. You are invencible now!<br>";
  effects.shield = myTurnCounter + 1;
};
function landedOnMagic(){
  document.getElementById('info').innerHTML += 'You entered the magic shop.<br>'
  $("#forms").attr("class", "magic");
}
function landedOnVillage(){
  document.getElementById('info').innerHTML += 'You entered a village.<br>';
  $("#forms").attr('class',"village");
}